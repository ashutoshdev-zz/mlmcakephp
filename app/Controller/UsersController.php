<?phpApp::uses('AppController', 'Controller');/** * Users Controller * * @property User $User * @property PaginatorComponent $Paginator */class UsersController extends AppController {            /**     * Components     *     * @var array     */    public $components = array('Paginator', 'Session','Hello');    //     var $name = 'Users';    public function beforeFilter() {            parent::beforeFilter();//     $this->Hello->method();//     exit;        $this->Auth->allow(array('admin_login', 'admin_forgetpwd', 'forgetpwd',            'login', 'admin_reset', 'reset', 'join', 'contact', 'chkuser', 'schkuser',            'logout', 'chkemail', 'verify', 'curl', 'test', 'member_price',            'notification', 'neteller_payment', 'pay', 'thankyou', 'view_lotteryno', 'play_ltr','date_chk'));    }    /**     * index method     *     * @return void     */    public function index() {        $this->User->recursive = 0;        $this->set('users', $this->Paginator->paginate());    }    /**     * view method     *     * @throws NotFoundException     * @param string $id     * @return void     */    public function view($id = null) {        if (!$this->User->exists($id)) {            throw new NotFoundException(__('Invalid user'));        }        $options = array('conditions' => array('User.' . $this->User->primaryKey => $id));        $this->set('user', $this->User->find('first', $options));    }            /**         *          */           public function paymentdetails($id=NULL) {           $this->loadModel('Payment');	 $data= $this->Payment->find('all',array('conditions'=>array('Payment.user_id'=>$this->Auth->user('id'))));                  $this->set('commisions',$data);         	}        public function delete_p($id = null) {            $this->loadModel('Payment');		$this->Payment->id = $id;		if (!$this->Payment->exists()) {			throw new NotFoundException(__('Invalid win'));		}		$this->request->allowMethod('post', 'delete');		if ($this->Payment->delete()) {			$this->Session->setFlash(__('The data has been deleted.'));		} else {			$this->Session->setFlash(__('The data could not be deleted. Please, try again.'));		}		return $this->redirect(array('action' => 'paymentdetails'));	}            /**     * add method     *     * @return void     */    public function add() {        if ($this->request->is('post')) {            $this->User->create();            if ($this->User->save($this->request->data)) {                $this->Session->setFlash(__('The user has been saved.'));                return $this->redirect(array('action' => 'index'));            } else {                $this->Session->setFlash(__('The user could not be saved. Please, try again.'));            }        }    }    /**     *      */    public function login() {        if ($this->request->is('post')) {            if ($this->Auth->login()) {                $this->redirect("/users/myaccount");                $this->Session->setFlash(__('Successfully LoggedIn!!!'));            } else {                $this->Session->setFlash(__('Invalid Username or Password, Please Try Again!!!'));                $this->redirect("/users/login");            }        } else {            $this->member_price();        }    }    public function member_price() {        $this->loadModel("Basicplan");        $this->loadModel("Businessplan");        $qry = $this->Basicplan->find("all");        $rst = $this->Businessplan->find("all");        $this->set('basicp', $qry);        $this->set('businessp', $rst);    }    public function logout() {        $this->Auth->logout();        $this->redirect("/users/login");    }/** *  */public function sendus(){   if($this->request->is("post")){                    $data=$this->request->data;                                        $ms = "<p>Contact Us</p>";                    $ms .= "<p>Subject: " . $data['sub'] . "</p>";                    $ms .= "<p>Message: " . $data['msg'] . "</p>";                                         $l = new CakeEmail('smtp');                    $l->emailFormat('html')->template('default', 'default')->subject('Contact Us')                            ->to($data['email'])->send($ms);                    $this->Session->setFlash(__("Message has been sent!"));                    $this->redirect($data['url']);                              }   else{       $this->redirect("users/myaccount");   }    exit;}/**     *      */    public function myaccount() {        $uid = $this->Auth->user('id');        $data = $this->User->find('first', array('conditions' => array('User.id' => $uid)));        $this->loadModel('Lottery');        $ldata = $this->Lottery->find('first', array('conditions' => array('AND' => array('Lottery.active' => 1, 'Lottery.user_id' => $uid))));        $this->set('lott_data', $ldata);        $this->set('data', $data);        $this->walletmoney();    }    /**     *      */    public function walletmoney() {        $uid = $this->Auth->user('id');        $this->loadModel('Wallet');        $wdata = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $uid)));        $this->set('wallet', $wdata);    }    /**     *      */    public function request_payment() {        $uid = $this->Auth->user('id');        $email = $this->User->find('first', array('conditions' => array('User.id' => 1), 'recursive' => -1, 'fields' => array('User.email')));        $userdata = $this->User->find('first', array('conditions' => array('User.id' => $uid), 'recursive' => -1, 'fields' => array('User.email')));        $this->loadModel('Wallet');        $wdata = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $uid)));        if ($wdata) {            if ($wdata['Wallet']['ammount'] != 0) {                $this->Wallet->id = $wdata['Wallet']['id'];                $this->Wallet->data['Wallet']['ammount'] = 0;                if ($this->Wallet->save($this->Wallet->data)) {                    $this->loadModel('PaymentAccount');                    $accont_info = $this->PaymentAccount->find('first', array('conditions' => array('PaymentAccount.user_id' => $uid)));                    // admin user                    $ms = "<p>Payment request by User</p>";                    $ms .= "<p>Ammount:</p><p>$" . $wdata['Wallet']['ammount'] . "</p>";                    $ms .= "<p>Neteller Secure ID:</p><p>" . $accont_info['PaymentAccount']['accountid'] . "</p>";                    $ms .= "<p>E-Mail:</p><p>" . $accont_info['PaymentAccount']['secureid'] . "</p>";                    $l = new CakeEmail('smtp');                    $l->emailFormat('html')->template('default', 'default')->subject('Payment Request By User')                            ->to($email['User']['email'])->send($ms);                    // subsciber                    $ms = "<p>Thanks! You have requested for payment!  </p>";                    $ms .= "<p>Ammount:</p><p>$" . $wdata['Wallet']['ammount'] . "</p>";                    $l = new CakeEmail('smtp');                    $l->emailFormat('html')->template('default', 'default')->subject('Payment Request')                            ->to($userdata['User']['email'])->send($ms);                    $this->set('smtp_errors', "none");                    $this->loadModel('Paymentrequest');                    $this->Paymentrequest->data['Paymentrequest']['payment'] = $wdata['Wallet']['ammount'];                    $this->Wallet->data['Paymentrequest']['uid'] = $uid;                    $this->Paymentrequest->save($this->Wallet->data);                    $this->Session->setFlash(__("You have requestd for payment!!"));                    $this->redirect(array('controller' => 'Users', 'action' => 'myaccount'));                }            } else {                $this->Session->setFlash(__("You have no more Balance!"));                $this->redirect(array('controller' => 'Users', 'action' => 'myaccount'));            }        } else {            $this->Session->setFlash(__("You have no more Balance!"));            $this->redirect(array('controller' => 'Users', 'action' => 'myaccount'));        }    }    public function mail_test() {        $email = $this->User->find('first', array('conditions' => array('User.id' => 1), 'recursive' => -1, 'fields' => array('User.email')));        $ms = "<p>Ammount:</p><p>fsdfsdfsd</p>";        $ms .= "<p>Ammount Info:</p>";        $l = new CakeEmail('smtp');        $l->emailFormat('html')->template('default', 'default')->subject('Payment Request')                ->to($email['User']['email'])->send($ms);        $this->set('smtp_errors', "none");        exit;    }    /**     *      */    public function changepassword() {        if ($this->request->is('post')) {            $password = AuthComponent::password($this->data['User']['old_password']);            $em = $this->Auth->user('username');            $pass = $this->User->find('first', array('conditions' => array('AND' => array('User.password' => $password, 'User.username' => $em))));            if ($pass) {                if ($this->data['User']['new_password'] != $this->data['User']['cpassword']) {                    $this->Session->setFlash(__("New password and Confirm password field do not match"));                } else {                    $this->User->data['User']['password'] = $this->data['User']['new_password'];                    $this->User->id = $pass['User']['id'];                    if ($this->User->exists()) {                        $pass['User']['password'] = $this->data['User']['new_password'];                        if ($this->User->save()) {                            $this->Session->setFlash(__("Password Updated"));                            $this->redirect(array('controller' => 'Users', 'action' => 'myaccount'));                        }                    }                }            } else {                $this->Session->setFlash(__("Your old password did not match."));            }        }    }    /**     * Set Cookies method     * @throws NotFoundException     * @param string $id     * @return void     */    protected function _setCookie($id) {        if (!$this->request->data('User.remember_me')) {            return false;        }        $data = array(            'username' => $this->request->data('User.username'),            'password' => $this->request->data('User.password')        );        $this->Cookie->write('User', $data, true, '+2 week');        return true;    }    /**     *      * @return type     */    public function join() {        if ($this->request->is('post')) {            $data = $this->request->data;            $this->loadModel('Basicplan');            $this->loadModel('Businessplan');            $bap = $this->Basicplan->find('all', array('conditions' => array('Basicplan.id' => 1)));            $bup = $this->Businessplan->find('all', array('conditions' => array('Businessplan.id' => 1)));            $userdata = $this->User->find("first", array('conditions' => array('User.username' => $data['User']['susername'])));            $data['User']['susername'] = $userdata['User']['username'];            $data['User']['parent_id'] = $userdata['User']['id'];            $data['User']['role'] = 'User';            if (empty($data['User']['susername'])) {                $this->Session->setFlash(__('Hmmm !You are unable to register Now! ', true));                return $this->redirect(array('controller' => 'Users', 'action' => 'join'));            } else {                if ($data['User']['cmt'] == "basic") {                    if ($data['User']['cml'] == "silver") {                        $plan = $bap[0]['Basicplan']['silver'];                    } else if ($data['User']['cml'] == "gold") {                        $plan = $bap[0]['Basicplan']['gold'];                    } else if ($data['User']['cml'] == "platinum") {                        $plan = $bap[0]['Basicplan']['platinum'];                    }                    $data['User']['basic'] = 1;                } else if ($data['User']['cmt'] == "business") {                    if ($data['User']['cml'] == "silver") {                        $plan = $bup[0]['Businessplan']['silver'];                    } else if ($data['User']['cml'] == "gold") {                        $plan = $bup[0]['Businessplan']['gold'];                    } else if ($data['User']['cml'] == "platinum") {                        $plan = $bup[0]['Businessplan']['platinum'];                    }                    $data['User']['basic'] = 0;                }                $data['User']['plan'] = $plan;                $data['User']['currency'] = 'USD';                $this->User->create();                if ($this->User->save($data)) {                    $id = $this->User->getLastInsertId();                    $url = Router::url(array('controller' => 'Users', 'action' => 'verify'), true) . '/' . base64_encode($this->User->getLastInsertId());                    $ms = "<p>Click the Link below to verify your E-mail.</p><br /> " . $url;                    $l = new CakeEmail('smtp');                    $l->emailFormat('html')->template('default', 'default')->subject('Verify Your E-mail')                            ->to($this->request->data['User']['email'])->send($ms);                    $this->set('smtp_errors', "none");                    $this->set('uid', base64_encode($id));                    $this->render('/Users/pay');                } else {                    $this->Session->setFlash(__('Registration does not sucessfull! Please try Again', true));                    $this->redirect("/Users/join");                }            }        } else {            $this->member_price();        }    }    private $_netellerClientID = 'AAABS8jUecHq7ucf';    private $_netellerClientSecret = '0.jtRATLqEK8J8d9fiRt5Mtzh_hvuPIBRLjkBXIpFAuLg.TWQKe6EynxKcbfhoWTT91AWHR-Y';    /**     *      * @param type $url     * @param type $data     * @param type $headers     * @return type     */    private function _netellerAccess($url = "https://test.api.neteller.com/v1/oauth2/token?grant_type=client_credentials", $data = array("scope" => "default"), $headers = array()) {        $curl = curl_init();        $headers = array_merge(array("Content-Type:application/json", "Cache-Control:no-cache"), $headers);        curl_setopt($curl, CURLOPT_POST, 1);        curl_setopt($curl, CURLOPT_URL, $url);        curl_setopt($curl, CURLOPT_USERPWD, $this->_netellerClientID . ":" . $this->_netellerClientSecret);        curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);        curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($data));        curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);        $serverOutput = curl_exec($curl);        return json_decode($serverOutput, true);    }    /**     *      * @param type $id     */    public function pay($id = NULL) {        if (!empty($id)) {            $this->set('uid', $id);        } else {            $this->redirect("/Users/join");        }    }    /**     * cron  job for status 1     * or sign up time check the friday 11.59 and month and set the date of the play lottery     */    public function play_ltr() {        $this->loadModel('Wallet');        $this->loadModel('Commision');        $parent = $this->User->getPath(61);        $commision_user = array_reverse($parent);        $amt = 50000;        $data_doller = $amt / 100;        $fifty_per = $data_doller * 50 / 100;        $ten_per = $data_doller * 10 / 100;        $five_per = $data_doller * 5 / 100;        $fifteen_per = $data_doller * 15 / 100;        $thirty_per = $data_doller * 30 / 100;        $two = $data_doller * 2 / 100;        $one = $data_doller * 1 / 100;        $zpfive = $data_doller * 0.5 / 100;       if ($commision_user[0]['User']['cml'] == 'silver') {            for ($i = 0; $i <= 6; $i++) {                $chldid = $commision_user[0]['User']['id'];                if ($i == 0 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                                    } else if ($i == 1 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1)                     {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $fifty_per;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $fifteen_per;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $ten_per;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    }                }                 else if ($i == 2 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1)                    {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $one;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $zpfive;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    }                } else if ($i == 3 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $one;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $zpfive;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    }                } else if ($i == 4 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $one;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $zpfive;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    }                } else if ($i == 5 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $one;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $zpfive;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    }                } else if ($i == 6 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                   $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $one;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $zpfive;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    }                }            }        }        elseif ($commision_user[0]['User']['cml'] == 'gold') {            for ($i = 0; $i <= 6; $i++)             {                $chldid = $commision_user[0]['User']['id'];                if ($i == 0 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                                    } else if ($i == 1 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1)                    {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $fifty_per;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $fifty_per;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $thirty_per;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    }                }                else if ($i == 2 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $one;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    }                } else if ($i == 3 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                   $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $one;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    }                } else if ($i == 4 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                 $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $one;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    }                } else if ($i == 5 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                   $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $one;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    }                } else if ($i == 6 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                   $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $one;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    }                }            }        }        elseif ($commision_user[0]['User']['cml'] == 'platinum') {            for ($i = 0; $i <= 6; $i++) {                $chldid = $commision_user[0]['User']['id'];                if ($i == 0 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                                    } else if ($i == 1 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $fifty_per;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $fifty_per;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $fifty_per;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    }                } else if ($i == 2 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $two;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    }                } else if ($i == 3 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $two;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    }                } else if ($i == 4 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $two;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    }                } else if ($i == 5 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $two;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    }                } else if ($i == 6 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $two;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);                        $ms = "<p>You have got  the commision!</p>";                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')                                ->to($commision_user[$i]['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                    }                }            }        }        exit;        $this->loadModel('Startlott');        $startlott = $this->Startlott->find('first');        $current_Date = date("Y-m-d");        $end_Date = $startlott["Startlott"]["enddate"];        $date1 = date_create($end_Date);        $date2 = date_create($current_Date);        $diff = date_diff($date1, $date2);        echo $days = $diff->format("%a");        // if($days>=27)        exit;    }   /**    *     */   public function date_chk(){              // activate the lottery status .....             $uid=6;      $this->loadModel('Startlott');      $this->loadModel('Playlott');      $Date=$this->Startlott->find('first');      $end_Date=$Date['Startlott']['enddate'];      $start_ts = date_create(date("Y-m-d"));            $end_ts = date_create($Date['Startlott']['enddate']);      $diff = date_diff($start_ts,$end_ts);      $days = $diff->format("%a");            if($days<=2){                   $play_data['Playlott']['uid']=$uid;          $play_data['Playlott']['startdate']= date("Y-m-d", strtotime($end_Date. "+ 28 days"));          $play_data['Playlott']['playdate']= date("Y-m-d", strtotime($end_Date. "+ 25 days"));          $play_data['Playlott']['enddate']= date("Y-m-d", strtotime($end_Date. "+ 56 days"));                 }else{                    $play_data['Playlott']['uid']=$uid;          $play_data['Playlott']['startdate']=$end_Date;          $play_data['Playlott']['playdate']=date("Y-m-d", strtotime($end_Date. "- 3 day"));          $play_data['Playlott']['enddate']=date("Y-m-d", strtotime($end_Date. "+ 28 days"));       }                       $this->Playlott->save($play_data);                exit;                                                     }   /**     *      * @param string $id     */    public function thankyou($id = NULL) {        $this->loadModel('Lottery');        $uid = base64_decode($id);        $data_user = $this->User->find('first', array('conditions' => array('AND' => array('User.status' => 1, 'User.id' => $uid))));        $cml = $data_user['User']['cml'];        $quantity = 5;        $numbers = range(1, 75);        shuffle($numbers);        $mega_million = array_slice($numbers, 1, $quantity);        //print_r($mega_million);        //echo "mega_million<br/>";        $quantity_powerball = 1;        $numbers_mega_power = range(1, 15);        shuffle($numbers_mega_power);        $mega_power_ball = array_slice($numbers_mega_power, 1, $quantity_powerball);        // print_r($mega_power_ball);        // echo "mega_million_ball<br/>";        $numbers_euro = range(1, 50);        shuffle($numbers_euro);        $euromillion = array_slice($numbers_euro, 1, $quantity);        //print_r($euromillion);        //echo "euro_million<br/>";        $quantity_epb = 2;        $numbers_euro_pb = range(1, 11);        shuffle($numbers_euro_pb);        $euromillion_pb = array_slice($numbers_euro_pb, 1, $quantity_epb);        // print_r($euromillion_pb);        //echo "mega_million_pb<br/>";        $uspb_pb = range(1, 59);        shuffle($uspb_pb);        $us_pb = array_slice($uspb_pb, 1, $quantity);        //print_r($us_pb);        //echo "uspb<br/>";        $uspb_pb_pb = range(1, 35);        shuffle($uspb_pb_pb);        $us_pb_pb = array_slice($uspb_pb_pb, 1, $quantity_powerball);        //print_r($us_pb_pb);        //echo "pb<br/>";        $this->Lottery->data['Lottery']['user_id'] = $uid;        $this->Lottery->data['Lottery']['status'] = 0;        if ($cml == 'silver') {            $this->Lottery->data['Lottery']['usmegamellion'] = serialize($mega_million);            $this->Lottery->data['Lottery']['usmegapowerball'] = serialize($mega_power_ball);        } else if ($cml == 'gold') {            $this->Lottery->data['Lottery']['usmegamellion'] = serialize($mega_million);            $this->Lottery->data['Lottery']['usmegapowerball'] = serialize($mega_power_ball);            $this->Lottery->data['Lottery']['euromillion'] = serialize($euromillion);            $this->Lottery->data['Lottery']['europb'] = serialize($euromillion_pb);        } else if ($cml == 'platinum') {            $this->Lottery->data['Lottery']['usmegamellion'] = serialize($mega_million);            $this->Lottery->data['Lottery']['usmegapowerball'] = serialize($mega_power_ball);            $this->Lottery->data['Lottery']['euromillion'] = serialize($euromillion);            $this->Lottery->data['Lottery']['europb'] = serialize($euromillion_pb);            $this->Lottery->data['Lottery']['uspb'] = serialize($us_pb);            $this->Lottery->data['Lottery']['pb'] = serialize($us_pb_pb);        }        $udata = $this->Lottery->find('count', array('conditions' => array('Lottery.user_id' => $uid)));        if ($udata == 0) {            if ($this->Lottery->save($this->Lottery->data)) {                                   $this->loadModel('Startlott');      $this->loadModel('Playlott');      $Date=$this->Startlott->find('first');      $end_Date=$Date['Startlott']['enddate'];      $start_ts = date_create(date("Y-m-d"));            $end_ts = date_create($Date['Startlott']['enddate']);      $diff = date_diff($start_ts,$end_ts);      $days = $diff->format("%r%a");            if($days<=2){                   $play_data['Playlott']['uid']=$uid;          $play_data['Playlott']['startdate']= date("Y-m-d", strtotime($end_Date. "+ 28 days"));          $play_data['Playlott']['playdate']= date("Y-m-d", strtotime($end_Date. "+ 25 days"));          $play_data['Playlott']['enddate']= date("Y-m-d", strtotime($end_Date. "+ 56 days"));                 }else{                    $play_data['Playlott']['uid']=$uid;          $play_data['Playlott']['startdate']=$end_Date;          $play_data['Playlott']['playdate']=date("Y-m-d", strtotime($end_Date. "- 3 day"));          $play_data['Playlott']['enddate']=date("Y-m-d", strtotime($end_Date. "+ 28 days"));       }                       $this->Playlott->save($play_data);                        $this->Session->setFlash(__('Welcome to Millionaires Lotto Club!'));                $str = 'ASD';                $id = base64_encode($uid) . "ASH" . base64_encode($str);                $this->redirect('/Users/view_lotteryno/' . $id);            } else {                $this->Session->setFlash(__('You are unable to access this page!'));                $this->redirect('/Users/login');            }        } else {            $this->Session->setFlash(__('You are unable to access this page!'));            $this->redirect('/Users/login');        }    }    /**     *      * @param type $id     */    public function view_lotteryno($id = NULL) {        $id = explode('ASH', $id);        $id = base64_decode($id[0]);        if ($id) {            $this->loadModel('Lottery');            $data_user = $this->User->find('first', array('conditions' => array('AND' => array('User.status' => 1, 'User.id' => $id))));            $lottery_data = $this->Lottery->find('first', array('conditions' => array('Lottery.user_id' => $id)));            $sta = $lottery_data['Lottery']['status'];            if ($sta == 0) {                $this->set('lotterydata', $lottery_data);                $this->set('udata', $data_user);            } else {                $this->Session->setFlash(__('You are unable to access this page!'));                $this->redirect('/Users/login');            }        } else {            $this->Session->setFlash(__('You are unable to access this page!'));            $this->redirect('/Users/login');        }    }    /**     *      */    public function neteller_payment() {        if ($this->request->is("POST")) {            $net_val = $this->request->data['User']['email'];            $net_sid = $this->request->data['User']['sid'];            $user_id = base64_decode($this->request->data['User']['uid']);            $udata = $this->User->find('first', array('conditions' => array('User.id' => $user_id)));            $amount = $udata['User']['plan'] + 10;            $accessToken = $this->_netellerAccess();            $data_string = '{            "paymentMethod": {                "type": "neteller",                "value": "' . $net_val . '"            },            "transaction": {                "merchantRefId": "2336' . time() . '",                "amount": ' . $amount . '00,                "currency": "USD"            },            "verificationCode": "' . $net_sid . '"        }';            $token = $accessToken['accessToken'];            $curl = curl_init();            $headers = array("Content-Type:application/json", "Cache-Control:no-cache", "Authorization: Bearer $token");            curl_setopt($curl, CURLOPT_POST, 1);            curl_setopt($curl, CURLOPT_URL, "https://test.api.neteller.com/v1/transferIn");            curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);            curl_setopt($curl, CURLOPT_POSTFIELDS, $data_string);            curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);            curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);            $serverOutput = curl_exec($curl);            $pres = json_decode($serverOutput);            if (isset($pres->transaction->status)) {                if ($pres->transaction->status == "accepted") {                    $t['Payment']['mid'] = $pres->transaction->merchantRefId;                    $t['Payment']['user_id'] = $user_id;                    $t['Payment']['amt'] = $pres->transaction->amount;                    $t['Payment']['trax_id'] = $pres->transaction->id;                    $t['Payment']['created'] = $pres->transaction->createDate;                    $t['Payment']['updated'] = $pres->transaction->updateDate;                    $this->loadModel('Payment');                    if ($this->Payment->save($t)) {                        $this->User->updateAll(                                array('User.status' => 1), array('User.id' => $user_id)                        );                        $ms = "<p>Thanks for the member of MLC</p><br/>";                        $ms.= "<p>MEMBERSHIP TYPE:- " . $udata['User']['cmt'] . "</p><br/>";                        $ms.= "<p>MEMBERSHIP LEVEL:- " . $udata['User']['cml'] . "</p><br/>";                        $ms.= "<p>E-Mail:- " . $udata['User']['email'] . "</p><br/>";                        $ms.= "<p>Transaction ID:- " . $pres->transaction->id . "</p><br/>";                        $ms.= "<p>Amount:- " . $pres->transaction->amount/100 . "</p><br/>";                        $l = new CakeEmail('smtp');                        $l->emailFormat('html')->template('default', 'default')->subject('MLC MemberShip')                                ->to($udata['User']['email'])->send($ms);                        $this->set('smtp_errors', "none");                         $this->loadModel('Wallet');                    $this->loadModel('Commision');                    $parent = $this->User->getPath($user_id);                    $commision_user = array_reverse($parent);                    $amt = $pres->transaction->amount;                    $data_doller = $amt / 100;                    $data_doller=$data_doller - 10;                    $fifty_per = $data_doller * 50 / 100;                    $ten_per = $data_doller * 10 / 100;                    $five_per = $data_doller * 5 / 100;                    $fifteen_per = $data_doller * 15 / 100;                    $thirty_per = $data_doller * 30 / 100;                    $two = $data_doller * 2 / 100;                    $one = $data_doller * 1 / 100;                    $zpfive = $data_doller * 0.5 / 100;            if ($commision_user[0]['User']['cmt'] == 'business'){       if ($commision_user[0]['User']['cml'] == 'silver') {            for ($i = 0; $i <= 6; $i++) {                $chldid = $commision_user[0]['User']['id'];                if ($i == 0 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                                    } else if ($i == 1 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1)                     {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $fifty_per;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $fifteen_per;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $ten_per;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    }                }                 else if ($i == 2 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1)                    {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $one;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $zpfive;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);////                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    }                } else if ($i == 3 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $one;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $zpfive;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    }                } else if ($i == 4 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $one;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $zpfive;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    }                } else if ($i == 5 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $one;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $zpfive;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    }                } else if ($i == 6 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                   $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $one;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $zpfive;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    }                }            }        }        elseif ($commision_user[0]['User']['cml'] == 'gold')             {            for ($i = 0; $i <= 6; $i++)             {                $chldid = $commision_user[0]['User']['id'];                if ($i == 0 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                                    } else if ($i == 1 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1)                    {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $fifty_per;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $fifty_per;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $thirty_per;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    }                }                else if ($i == 2 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $one;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    }                } else if ($i == 3 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                   $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $one;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    }                } else if ($i == 4 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                 $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $one;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    }                } else if ($i == 5 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                   $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $one;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    }                } else if ($i == 6 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                   $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $one;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    }                }            }        }        elseif ($commision_user[0]['User']['cml'] == 'platinum')      {            for ($i = 0; $i <= 6; $i++) {                $chldid = $commision_user[0]['User']['id'];                if ($i == 0 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                                    } else if ($i == 1 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $fifty_per;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $fifty_per;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $fifty_per;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    }                } else if ($i == 2 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $two;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    }                } else if ($i == 3 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $two;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    }                } else if ($i == 4 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $two;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    }                } else if ($i == 5 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $two;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    }                } else if ($i == 6 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                        $comm_amt = $two;                    } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        $comm_amt = $two;                    }                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    }                }            }        }            }elseif ($commision_user[0]['User']['cmt'] == 'basic') {                        for ($i = 0; $i <= 1; $i++) {                $chldid = $commision_user[0]['User']['id'];                if ($i == 0 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                                    } else if ($i == 1 && !empty($commision_user[$i]['User']['username']) && $commision_user[$i]['User']['status'] == 1) {                    $comm_id = $commision_user[$i]['User']['id'];                    if ($commision_user[$i]['User']['cml'] == 'silver') {                        $comm_amt = 6;                    } elseif ($commision_user[$i]['User']['cml'] == 'gold') {                      if($commision_user[0]['User']['cml']=="silver"){ $comm_amt = 6;}                     else if($commision_user[0]['User']['cml']=="gold" || $commision_user[0]['User']['cml']=="platinum"){                         $comm_amt = 12;                     }                                            } elseif ($commision_user[$i]['User']['cml'] == 'platinum') {                        if($commision_user[0]['User']['cml']=="silver"){ $comm_amt = 6;}                     else if($commision_user[0]['User']['cml']=="gold"){                         $comm_amt = 12;                     }                     else if($commision_user[0]['User']['cml']=="platinum"){                       $comm_amt = 20;                       }                    }                                    $commision_data = "INSERT INTO commisions(user_id,child_user_id,commisions,created) VALUES('$comm_id','$chldid','$comm_amt',NOW())";                    $this->Commision->query($commision_data);                    $wall_user = $this->Wallet->find('first', array('conditions' => array('Wallet.user_id' => $comm_id)));                    if (empty($wall_user)) {                        $wqry = "INSERT INTO wallets(user_id,ammount) VALUES('$comm_id','$comm_amt')";                        $this->Wallet->query($wqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    } else {                        $total_amt = $wall_user['Wallet']['ammount'] + $comm_amt;                        $uwqry = "UPDATE wallets SET ammount='$total_amt' where user_id='$comm_id'";                        $this->Wallet->query($uwqry);//                        $ms = "<p>You have got  the commision!</p>";//                        $ms .= "<p>Ammount:$</p><p>" . $comm_amt . "</p>";//                        $l = new CakeEmail('smtp');//                        $l->emailFormat('html')->template('default', 'default')->subject('Commision')//                                ->to($commision_user[$i]['User']['email'])->send($ms);//                        $this->set('smtp_errors', "none");                    }                }                }                                                    }                        $this->Session->setFlash(__("Your Payment has been Sucessfull! Now You are the member of MLC.</br>Please check your E-mail address!"));                        $this->redirect('/Users/thankyou/' . base64_encode($user_id));                    }                } else {                    $this->Session->setFlash(__("Payment is not sucessfull! Try Again!"));                    $this->redirect("/Users/pay/" . base64_encode($user_id));                }            } else {                $this->Session->setFlash(__("You have Enter the wrong account information! Try Again!"));                $this->redirect("/Users/pay/" . base64_encode($user_id));            }        } else {            $this->redirect("/Users/join");        }    }    /**     * @param type $id     * @return type     */    public function verify($id = null) {        if ($id) {            $id = base64_decode($id);            $this->User->id = $id;            $arr1 = $this->User->query("update `users` set `confirm`='1' where `id`=$id");            $this->Session->setFlash(__('Congratulations!! your E-mail has been verified!!! '));            return $this->redirect('/users/login');        } else {            return $this->redirect('/users/login');        }    }    /**     *      */    public function chkuser() {        $this->layout = 'ajax';        $uname = $this->request->data['User']['username'];        $data = $this->User->find('count', array('conditions' => array('User.username' => $uname)));        if ($data) {            echo "false";            exit;        } else {            echo "true";            exit;        }        $this->set('reponse', $reponse);        $this->render('ajax');    }    /**     *      */    public function chkemail() {        $this->layout = 'ajax';        $uname = $this->request->data['User']['email'];        $data = $this->User->find('count', array('conditions' => array('User.email' => $uname)));        if ($data) {            echo "false";            exit;        } else {            echo "true";            exit;        }        $this->set('reponse', $reponse);        $this->render('ajax');    }    /**     *      */    /**     *      */    public function schkuser() {        $this->layout = 'ajax';        $uname = $this->request->data['User']['susername'];        $data = $this->User->find('count', array('conditions' => array('User.username' => $uname, 'User.status' => 1, 'User.basic' => 0)));        if (!$data) {            echo "false";            exit;        } else {            echo "true";            exit;        }        $this->set('reponse', $reponse);        $this->render('ajax');    }    /**     * edit method     *     * @throws NotFoundException     * @param string $id     * @return void     */    public function edit($id = null) {        $url = $id;        $id = explode('ASH', $id);        $id = base64_decode($id[0]);        $this->User->id = $id;        if (!$this->User->exists($id)) {            return $this->redirect(array('action' => 'personal_details'));        }        if ($this->request->is('post') || $this->request->is('put')) {            $email = $this->Auth->user('email');            if ($email == $this->request->data['User']['email']) {                if ($this->User->save($this->request->data)) {                    $this->Session->setFlash(__('Your profile has been updated.'));                    return $this->redirect(array('action' => 'personal_details'));                } else {                    $this->Session->setFlash(__('The user could not be saved. Please, try again.'));                }            } else if ($this->User->hasAny(array('User.email' => $this->request->data['User']['email']))) {                $this->Session->setFlash(__('Email already exist!!!'));                return $this->redirect(array('action' => 'edit/' . $url));            } else {                if ($this->User->save($this->request->data)) {                    $this->Session->setFlash(__('Your profile has been updated.'));                    return $this->redirect(array('action' => 'personal_details'));                } else {                    $this->Session->setFlash(__('The user could not be saved. Please, try again.'));                }            }        } else {            $options = array('conditions' => array('User.' . $this->User->primaryKey => $id));            $data = $this->request->data = $this->User->find('first', $options);            $this->set('data', $data);        }    }    /**     * delete method     *     * @throws NotFoundException     * @param string $id     * @return void     */    public function delete($id = null) {        $this->User->id = $id;        if (!$this->User->exists()) {            throw new NotFoundException(__('Invalid user'));        }        $this->request->allowMethod('post', 'delete');        if ($this->User->delete()) {            $this->Session->setFlash(__('The user has been deleted.'));        } else {            $this->Session->setFlash(__('The user could not be deleted. Please, try again.'));        }        return $this->redirect(array('action' => 'index'));    }    /**     *      */    public function contact() {        if ($this->request->is('post')) {            $datas = $this->User->find('first', array('conditions' => array('User.role' => 'Admin')));            $ms = "<b>Name:" . $this->request->data['User']['name'] . "</b><br/>";            $ms.="<b>E-mail:" . $this->request->data['User']['email'] . "</b><br/>";            $ms.="<b>Subject:" . $this->request->data['User']['subject'] . "</b><br/>";            $ms.="<b>Message:" . $this->request->data['User']['msg'] . "</b><br/>";            $l = new CakeEmail('smtp');            $l->emailFormat('html')->template('default', 'default')->subject('Contact Us')                    ->to($datas['User']['email'])->send($ms);            $this->set('smtp_errors', "none");            $this->Session->setFlash(__('You message has been sent!', true));            $this->redirect(array('controller' => 'pages', 'action' => 'contact'));        }    }    /**     *      */    public function personal_details() {        $uid = $this->Auth->user('id');        $data = $this->User->find('first', array('conditions' => array('User.id' => $uid)));        $this->set('data', $data);    }    public function mln() {            }    public function wc() {            }    public function admin_user_tree($userId = 1) {        $this->loadModel('User');        $user = $this->User->find('first', array(            "conditions" => array(                "User.id" => $userId            )        ));        $comments = $this->User->children($userId, false);        $comments[] = $user;        $this->set('tree', Hash::nest($comments));        $this->render("admin_user_tree", "admin");    }    public function admin_basic() {        if ($this->request->is("post")) {            if ($this->request->data["keyword"]) {                $keyword = $this->request->data["keyword"];                $this->paginate = array("limit" => 20, "conditions" => array("User.cmt" => 'basic', 'OR' => array(                            "User.username LIKE" => "%" . $keyword . "%",                            "User.email LIKE" => "%" . $keyword . "%",                            "User.cmt Like" => "%" . $keyword . "%",                        )),                    "order" => array(                        "User.id" => "DESC"                    )                );                $this->set("keyword", $keyword);            }            $this->set('basics', $this->paginate());        } else {            $this->paginate = array('all', 'conditions' => array("User.cmt" => 'basic'));            $this->set('basics', $this->paginate());        }    }    public function user_tree() {        $this->loadModel('User');        $userId = $this->Auth->user('id');        $user = $this->User->find('first', array(            "conditions" => array(                "User.id" => $userId            )        ));        $comments = $this->User->children($userId, false);        $comments[] = $user;        $this->set('tree', Hash::nest($comments));    }     public function user_sponsor() {        $this->loadModel('User');        $userId = $this->Auth->user('id');        $user = $this->User->find('first', array(            "conditions" => array(                "User.id" => $userId            )        ));        $comments = $this->User->children($userId, false);        $comments[] = $user;        $this->set('tree', Hash::nest($comments));    }    public function admin_tree_search() {        $uname = $this->request->data['User']['search'];        $data = $this->User->find('first', array('conditions' => array('User.username' => $uname)));        if ($data) {            print_r($data);        } else {            $this->Session->setFlash(__("Sorry unvalid keyword! Try Again!", TRUE));        }        exit;    }    public function user_parent() {        $userId = $this->Auth->user('id');        $data = $this->User->find('first', array(            'conditions' => array(                'User.id' => $userId            )        ));        $parent = $this->User->getParentNode($userId);        $datas[] = $data;        $datas[] = $parent;        $this->set('tree', Hash::nest($datas));        $this->render("user_tree", "default");    }    public function user_asdf() {        //$userId = $this->Auth->user('id');        $userId = 27;        $parent = $this->User->getPath($userId);        $commision_user = array_reverse($parent);        $amt = 100;        $fifty_per = $amt * 50 / 100;        $ten_per = $amt * 10 / 100;        $five_per = $amt * 5 / 100;        for ($i = 0; $i <= 6; $i++) {            if ($i == 0 && !empty($commision_user[$i]['User']['username'])) {                echo $commision_user[$i]['User']['id'];                //echo $fifty_per;            } else if ($i == 1 && !empty($commision_user[$i]['User']['username'])) {                // echo $ten_per;                echo $commision_user[$i]['User']['id'];            } else if ($i == 2 && !empty($commision_user[$i]['User']['username'])) {                // echo $ten_per;                echo $commision_user[$i]['User']['id'];            } else if ($i == 3 && !empty($commision_user[$i]['User']['username'])) {                //   echo $ten_per;                echo $commision_user[$i]['User']['id'];            } else if ($i == 4 && !empty($commision_user[$i]['User']['username'])) {                // echo $ten_per;                  echo $commision_user[$i]['User']['id'];            } else if ($i == 5 && !empty($commision_user[$i]['User']['username'])) {                // echo $five_per;                 echo $commision_user[$i]['User']['id'];            } else if ($i == 6 && !empty($commision_user[$i]['User']['username'])) {                //  echo $five_per;                 echo $commision_user[$i]['User']['id'];            }        }        exit;    }    public function admin_reply($id = NULL) {        if ($this->request->is(array('post'))) {            $sub = $this->request->data['User']['subject'];            $ms = $this->request->data['User']['description'];            $email = $this->request->data['User']['email'];            $l = new CakeEmail('smtp');            $l->emailFormat('html')->template('default', 'default')->subject($sub)                    ->to($email)->send($ms);            $this->Session->setFlash(__("You have sent Newsletter!"));            $data = $this->User->find('first', array('conditions' => array('User.id' => $id)));            $this->set('email', $data);        } else {            $data = $this->User->find('first', array('conditions' => array('User.id' => $id)));            $this->set('email', $data);        }    }    public function admin_index() {        $this->layout = "admin";        $this->User->recursive = 0;        if ($this->request->is("post")) {            if ($this->request->data["keyword"]) {                $keyword = trim($this->request->data["keyword"]);                $this->paginate = array("limit" => 20, "conditions" => array("OR" => array(                            "User.username LIKE" => "%" . $keyword . "%",                            "User.email LIKE" => "%" . $keyword . "%",                            "User.phone_no LIKE" => "%" . $keyword . "%"                )));                $this->set("keyword", $keyword);            }        }        $this->set('users', $x = $this->Paginator->paginate());//        debug($x);exit;    }    /**     * admin_view method     *     * @throws NotFoundException     * @param string $id     * @return void     */    public function admin_view($id = null) {        $this->layout = "admin";        if (!$this->User->exists($id)) {            throw new NotFoundException(__('Invalid user'));        }        $options = array('conditions' => array('User.' . $this->User->primaryKey => $id));        $this->set('user', $this->User->find('first', $options));    }    /**     * admin_add method     *     * @return void     */    public function admin_add() {        $this->layout = "admin";        if ($this->request->is('post')) {            if ($this->User->hasAny(array('User.username' => $this->request->data['User']['username']))) {                $this->Session->setFlash(__('Username already exist!!!'));                return $this->redirect(array('action' => 'admin_add'));            } else {                if ($this->User->hasAny(array('User.email' => $this->request->data['User']['email']))) {                    $this->Session->setFlash(__('Email already exist!!!'));                    return $this->redirect(array('action' => 'admin_add'));                } else {                    $this->User->create();                    if ($this->User->save($this->request->data)) {                        $this->Session->setFlash(__('The user has been saved.'));                        return $this->redirect(array('action' => 'index'));                    } else {                        $this->Session->setFlash(__('The user could not be saved. Please, try again.'));                    }                }            }        }        $this->set("users_list", $this->User->find('list'));    }    /**     * admin_edit method     *     * @throws NotFoundException     * @param string $id     * @return void     */    public function admin_edit($id = null) {        $this->layout = "admin";        $this->User->id = $id;        if (!$this->User->exists()) {            throw new NotFoundException(__('Invalid User'));        }        if ($this->request->is('post') || $this->request->is('put')) {            if ($this->User->save($this->request->data)) {                $this->Session->setFlash(__('The User has been saved'));                $this->redirect(array('action' => 'admin_index'));            } else {                $this->Session->setFlash(__('The User could not be saved. Please, try again.'));            }        } else {            $this->request->data = $this->User->read(null, $id);        }        $this->set('admin_edit', $this->User->find('first', array('conditions' => array('User.id' => $id))));    }    /**     * admin_delete method     *     * @throws NotFoundException     * @param string $id     * @return void     */    public function admin_delete($id = null) {        $this->User->id = $id;        if (!$this->User->exists()) {            throw new NotFoundException(__('Invalid user'));        }        $this->request->allowMethod('post', 'delete');        if ($this->User->delete()) {            $this->Session->setFlash(__('The user has been deleted.'));        } else {            $this->Session->setFlash(__('The user could not be deleted. Please, try again.'));        }        return $this->redirect(array('action' => 'index'));    }    public function admin_deleteall($id = null) {        if (!$this->request->is('post')) {            throw new MethodNotAllowedException();        }        foreach ($this->request['data']['User'] as $k) {            $this->User->id = (int) $k;            if ($this->User->exists()) {                $this->User->delete();            }        }        $this->Session->setFlash(__('Admin deleted....'));        $this->redirect(array('action' => 'index'));    }    public function admin_profiles() {        $this->layout = "admin";        $profile = $this->User->find('first', array('conditions' => array(                'User.id' => $this->Auth->user('id')            ))        );        $this->set('admin_profiles', $profile);    }    public function admin_profilesedit($id = NULL) {        $this->layout = "admin";        $this->User->id = $id;        $x = $this->User->find('first', array('conditions' => array('User.id' => $id)));        if ($this->request->is('post') || $this->request->is('put')) {            if ($this->User->save($this->request->data)) {                $this->Session->setFlash(__('The Admin Profile has been saved'));                $this->redirect(array('action' => 'admin_profiles'));            } else {                $this->Session->setFlash(__('The Admin Profile could not be saved. Please, try again.'));            }        } else {            $options = array('conditions' => array('User.' . $this->User->primaryKey => $id));            $this->request->data = $this->User->find('first', $options);            $this->set("user_edit", $this->request->data);        }    }    public function admin_account_setting($id = NULL) {        $this->loadModel('PaymentAccount');        $this->PaymentAccount->id = $id;        if ($this->request->is(array('post', 'put'))) {            if ($this->PaymentAccount->save($this->request->data)) {                $this->Session->setFlash(__('The payment account has been saved.'));                return $this->redirect(array('action' => 'admin_account_setting', $id));            } else {                $this->Session->setFlash(__('The payment account could not be saved. Please, try again.'));                return $this->redirect(array('action' => 'admin_account_setting', $id));            }        }        $data = $this->PaymentAccount->find('first', array('conditions' => array('PaymentAccount.' . $this->PaymentAccount->primaryKey => $id)));        $this->set('setting', $data);    }    public function admin_changepassword() {        $this->layout = "admin";        if ($this->request->is('post')) {            $password = AuthComponent::password($this->data['User']['old_password']);            $em = $this->Auth->user('username');            $pass = $this->User->find('first', array('conditions' => array('AND' => array('User.password' => $password, 'User.username' => $em))));            if ($pass) {                if ($this->data['User']['new_password'] != $this->data['User']['cpassword']) {                    $this->Session->setFlash(__("New password and Confirm password field do not match"));                } else {                    $this->User->data['User']['password'] = $this->data['User']['new_password'];                    $this->User->id = $pass['User']['id'];                    if ($this->User->exists()) {                        $pass['User']['password'] = $this->data['User']['new_password'];                        if ($this->User->save()) {                            $this->Session->setFlash(__("Password Updated"));                            $this->redirect(array('controller' => 'Users', 'action' => 'admin_profiles'));                        }                    }                }            } else {                $this->Session->setFlash(__("Your old password did not match."));            }        }    }    public function admin_login() {        if ($this->request->is('post')) {            if ($this->Auth->login()) {                $this->redirect("/admin/users");                $this->Session->setFlash(__('Successfully LoggedIn!!!'));            } else {                $this->Session->setFlash(__('Invalid Username or Password, Please Try Again!!!'));                $this->redirect("/admin/users/login");            }        }    }    /**     *      */    public function admin_logout() {        if ($this->Auth->logout()) {            $this->redirect("/admin/users/login");        }    }    /**     * admin_forgetpwd method     *     * @throws NotFoundException     * @param string $id     * @return void     */    public function admin_forgetpwd() {        $this->User->recursive = -1;        if (!empty($this->data)) {            if (empty($this->data['User']['email'])) {                $this->Session->setFlash('Please Provide Your Email Address that You used to Register with Us');            } else {                $email = $this->data['User']['email'];                $fu = $this->User->find('first', array('conditions' => array('User.email' => $email)));                if ($fu) {                    if ($fu['User']['status'] == "1") {                        $key = Security::hash(String::uuid(), 'sha512', true);                        $hash = sha1($fu['User']['email'] . rand(0, 100));                        $url = Router::url(array('controller' => 'Users', 'action' => 'reset'), true) . '/' . $key . '#' . $hash;                        $ms = "<p>Click the Link below to reset your password.</p><br /> " . $url;                        $fu['User']['tokenhash'] = $key;                        $this->User->id = $fu['User']['id'];                        if ($this->User->saveField('tokenhash', $fu['User']['tokenhash'])) {                            $l = new CakeEmail('smtp');                            $l->emailFormat('html')->template('default', 'default')->subject('Reset Your Password')                                    ->to($fu['User']['email'])->send($ms);                            $this->set('smtp_errors', "none");                            $this->Session->setFlash(__('Check Your Email To Reset your password', true));                            $this->redirect(array('controller' => 'Users', 'action' => 'login'));                        } else {                            $this->Session->setFlash("Error Generating Reset link");                        }                    } else {                        $this->Session->setFlash('This Account is not Active yet.Check Your mail to activate it');                    }                } else {                    $this->Session->setFlash('Email does Not Exist');                }            }        }    }    /**     * forgetpwd method     *     * @throws NotFoundException     * @param string $id     * @return void     */    public function forgetpwd() {        $this->User->recursive = -1;        if (!empty($this->data)) {            if (empty($this->data['User']['email'])) {                $this->Session->setFlash('Please Provide Your Email Address that You used to Register with Us');            } else {                $email = $this->data['User']['email'];                $fu = $this->User->find('first', array('conditions' => array('User.email' => $email)));                if ($fu) {                    if ($fu['User']['status'] == "1") {                        $key = Security::hash(String::uuid(), 'sha512', true);                        $hash = sha1($fu['User']['email'] . rand(0, 100));                        $url = Router::url(array('controller' => 'Users', 'action' => 'reset'), true) . '/' . $key . '#' . $hash;                        $ms = "<p>Click the Link below to reset your password.</p><br /> " . $url;                        $fu['User']['tokenhash'] = $key;                        $this->User->id = $fu['User']['id'];                        if ($this->User->saveField('tokenhash', $fu['User']['tokenhash'])) {                            $l = new CakeEmail('smtp');                            $l->emailFormat('html')->template('default', 'default')->subject('Reset Your Password')                                    ->to($fu['User']['email'])->send($ms);                            $this->set('smtp_errors', "none");                            $this->Session->setFlash(__('Check Your Email To Reset your password', true));                            $this->redirect(array('controller' => 'Users', 'action' => 'login'));                        } else {                            $this->Session->setFlash("Error Generating Reset link");                        }                    } else {                        $this->Session->setFlash('This Account is not Active yet.Check Your mail to activate it');                    }                } else {                    $this->Session->setFlash('Email does Not Exist');                }            }        }    }    /**     * admin_resetpwd method     *     * @throws NotFoundException     * @param string $id     * @return void     */    public function admin_reset($token = null) {        configure::write('debug', 2);        $this->User->recursive = -1;        if (!empty($token)) {            $u = $this->User->findBytokenhash($token);            if ($u) {                $this->User->id = $u['User']['id'];                if (!empty($this->data)) {                    if ($this->data['User']['password'] != $this->data['User']['password_confirm']) {                        $this->Session->setFlash("Both the passwords are not matching...");                        return;                    }                    $this->User->data = $this->data;                    $this->User->data['User']['email'] = $u['User']['email'];                    $new_hash = sha1($u['User']['email'] . rand(0, 100)); //created token                    $this->User->data['User']['tokenhash'] = $new_hash;                    if ($this->User->validates(array('fieldList' => array('password', 'password_confirm')))) {                        if ($this->User->save($this->User->data)) {                            $this->Session->setFlash('Password Has been Updated');                            $this->redirect(array('controller' => 'Users', 'action' => 'login'));                        }                    } else {                        $this->set('errors', $this->User->invalidFields());                    }                }            } else {                $this->Session->setFlash('Token Corrupted, Please Retry.the reset link                         <a style="cursor: pointer; color: rgb(0, 102, 0); text-decoration: none;                        background: url("http://files.adbrite.com/mb/images/green-double-underline-006600.gif")                         repeat-x scroll center bottom transparent; margin-bottom: -2px; padding-bottom: 2px;"                        name="AdBriteInlineAd_work" id="AdBriteInlineAd_work" target="_top">work</a> only for once.');            }        } else {            $this->Session->setFlash('Pls try again...');            $this->redirect(array('controller' => 'pages', 'action' => 'login'));        }    }    /**     * reset method     *     * @throws NotFoundException     * @param string $id     * @return void     */    public function reset($token = null) {        configure::write('debug', 2);        $this->User->recursive = -1;        if (!empty($token)) {            $u = $this->User->findBytokenhash($token);            if ($u) {                $this->User->id = $u['User']['id'];                if (!empty($this->data)) {                    if ($this->data['User']['password'] != $this->data['User']['password_confirm']) {                        $this->Session->setFlash("Both the passwords are not matching...");                        return;                    }                    $this->User->data = $this->data;                    $this->User->data['User']['email'] = $u['User']['email'];                    $new_hash = sha1($u['User']['email'] . rand(0, 100)); //created token                    $this->User->data['User']['tokenhash'] = $new_hash;                    if ($this->User->validates(array('fieldList' => array('password', 'password_confirm')))) {                        if ($this->User->save($this->User->data)) {                            $this->Session->setFlash('Password Has been Updated');                            $this->redirect(array('controller' => 'Users', 'action' => 'login'));                        }                    } else {                        $this->set('errors', $this->User->invalidFields());                    }                }            } else {                $this->Session->setFlash('Token Corrupted, Please Retry.the reset link                         <a style="cursor: pointer; color: rgb(0, 102, 0); text-decoration: none;                        background: url("http://files.adbrite.com/mb/images/green-double-underline-006600.gif")                         repeat-x scroll center bottom transparent; margin-bottom: -2px; padding-bottom: 2px;"                        name="AdBriteInlineAd_work" id="AdBriteInlineAd_work" target="_top">work</a> only for once.');            }        } else {            $this->Session->setFlash('Pls try again...');            $this->redirect(array('controller' => 'pages', 'action' => 'login'));        }    }    public function curl() {        $login_email = 'tp12gshock.com';        $ch = curl_init();        curl_setopt($ch, CURLOPT_URL, 'http://whois.domaintools.com/' . $login_email);        curl_setopt($ch, CURLOPT_POSTFIELDS, 'q=' . urlencode($login_email));        curl_setopt($ch, CURLOPT_POST, 1);        curl_setopt($ch, CURLOPT_HEADER, 0);        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);        curl_setopt($ch, CURLOPT_COOKIEJAR, "cookies.txt");        curl_setopt($ch, CURLOPT_COOKIEFILE, "cookies.txt");        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);        curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.3) Gecko/20070309 Firefox/2.0.0.3");        curl_setopt($ch, CURLOPT_REFERER, "http://whois.domaintools.com/");        $page = curl_exec($ch) or die(curl_error($ch));        echo $page;        exit;    }    public function admin_activate($id = null) {        $this->User->id = $id;        if ($this->User->exists()) {            $x = $this->User->save(array(                'User' => array(                    'status' => '1'                )            ));            $this->Session->setFlash(__("Activated successfully."));            $this->redirect($this->referer());        } else {            $this->Session->setFlash(__("Unable to activate."));            $this->redirect($this->referer());        }    }    public function admin_deactivate($id = null) {        $this->User->id = $id;        if ($this->User->exists()) {            $x = $this->User->save(array(                'User' => array(                    'status' => '0'                )            ));            $this->Session->setFlash(__("Activated successfully."));            $this->redirect($this->referer());        } else {            $this->Session->setFlash(__("Unable to activate."));            $this->redirect($this->referer());        }    }    public function admin_activateall($id = null) {        if (!$this->request->is('post')) {            throw new MethodNotAllowedException();        }        foreach ($this->request['data']['User'] as $k => $v) {            if ($k == $v) {                $this->User->id = $v;                if ($this->User->exists()) {                    $x = $this->User->save(array(                        'User' => array(                            'status' => 1                        )                    ));                    $this->Session->setFlash(__('Selected Users Activated.', true));                } else {                    $this->Session->setFlash(__("Unable to Activate Users."));                }            }        }        $this->redirect($this->referer());    }    public function admin_inactivateall($id = null) {        if (!$this->request->is('post')) {            throw new MethodNotAllowedException();        }        foreach ($this->request['data']['User'] as $k => $v) {            if ($k == $v) {                $this->User->id = $v;                if ($this->User->exists()) {                    $x = $this->User->save(array(                        'User' => array(                            'status' => 0                        )                    ));                    $this->Session->setFlash(__('Selected Users Deactivated.', true));                } else {                    $this->Session->setFlash(__("Unable to Deactivate Users."));                }            }        }        $this->redirect($this->referer());    }    public function test() {////        echo '<form method="post" action="https://api.neteller.com/instantpayout">////<input type="text" name="version" value=" 4.0">////<input type="text" name="amount" size="10" maxlength="5" value="100">////<input type="hidden" name="merchant_id" value="454323682619">////<input type="hidden" name="merch_pass" value="Web@high34">////<input type="hidden" name="merch_account" value="john123" maxlength="50">////<input type="hidden" name="merch_key" value="929129">////<input type="text" name="net_account " size="20" maxlength="12">////<input type="text" name="currency" value="USD" size="10" maxlength="3">////<input type="hidden" name="merch_transid" value="Unique Transaction ID">////<input type="submit" name="button" value="Make Transfer">';        exit;    }    public function notification() {        if ($this->isSandbox()) {            $url = 'https://test.api.neteller.com/instantpayout';        } else {            $url = 'https://api.neteller.com/instantpayout';        }        $fields = array(            'version' => $version,            'amount' => urlencode($amount),            'merchant_id' => urlencode($merchant_id),            'merch_pass' => urlencode($merchant_password),            'merch_account' => urlencode($merchant_account),            'merch_key' => urlencode($merchant_key),            'net_account' => urlencode($net_account),            'custom_1' => urlencode($custom_1),            'custom_2' => urlencode($custom_2),            'custom_3' => urlencode($custom_3),            'merch_transid' => urlencode($merchant_transid),            'currency' => $currency,            'button' => 'Make Transfer'        );        $ch = curl_init($url);        curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/5.0 (Windows; U; Windows NT 5.1; pl; rv:1.9) Gecko/2008052906 Firefox/3.0");        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);        curl_setopt($ch, CURLOPT_POST, true);        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);        curl_setopt($ch, CURLOPT_POSTFIELDS, $fields);        curl_setopt($ch, CURLOPT_IPRESOLVE, CURL_IPRESOLVE_V4);        curl_setopt($ch, CURLOPT_CAINFO, APP . "Lib" . DS . "curl" . DS . "cacert.pem");        if ($this->isSandbox()) {            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);        }        $output = curl_exec($ch);        $info = curl_getinfo($ch);        if ($output === false) {            $error = curl_error($ch);            pr($error);        } else {            $response = simplexml_load_string($output);            pr($response);        }    }}